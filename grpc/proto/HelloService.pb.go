// Code generated by protoc-gen-go. DO NOT EDIT.
// source: HelloService.proto

package hello

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloReq struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReq) Reset()         { *m = HelloReq{} }
func (m *HelloReq) String() string { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()    {}
func (*HelloReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_df26df2ba82d0569, []int{0}
}

func (m *HelloReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReq.Unmarshal(m, b)
}
func (m *HelloReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReq.Marshal(b, m, deterministic)
}
func (m *HelloReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReq.Merge(m, src)
}
func (m *HelloReq) XXX_Size() int {
	return xxx_messageInfo_HelloReq.Size(m)
}
func (m *HelloReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReq.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReq proto.InternalMessageInfo

func (m *HelloReq) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type HelloResp struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloResp) Reset()         { *m = HelloResp{} }
func (m *HelloResp) String() string { return proto.CompactTextString(m) }
func (*HelloResp) ProtoMessage()    {}
func (*HelloResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_df26df2ba82d0569, []int{1}
}

func (m *HelloResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloResp.Unmarshal(m, b)
}
func (m *HelloResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloResp.Marshal(b, m, deterministic)
}
func (m *HelloResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResp.Merge(m, src)
}
func (m *HelloResp) XXX_Size() int {
	return xxx_messageInfo_HelloResp.Size(m)
}
func (m *HelloResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResp.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResp proto.InternalMessageInfo

func (m *HelloResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HelloResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloReq)(nil), "proto.HelloReq")
	proto.RegisterType((*HelloResp)(nil), "proto.HelloResp")
}

func init() {
	proto.RegisterFile("HelloService.proto", fileDescriptor_df26df2ba82d0569)
}

var fileDescriptor_df26df2ba82d0569 = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xf2, 0x48, 0xcd, 0xc9,
	0xc9, 0x0f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x05, 0x53, 0x4a, 0x72, 0x5c, 0x1c, 0x60, 0xc9, 0xa0, 0xd4, 0x42, 0x21, 0x21, 0x2e, 0x96, 0xe4,
	0xfc, 0x94, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x30, 0x5b, 0xc9, 0x92, 0x8b, 0x13,
	0x2a, 0x5f, 0x5c, 0x80, 0x4d, 0x81, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x7a,
	0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x8c, 0x6b, 0xb4, 0x8a, 0x91, 0x8b, 0x07, 0xd9,
	0x62, 0x21, 0x2d, 0x2e, 0x56, 0x30, 0x5f, 0x88, 0x1f, 0xe2, 0x06, 0x3d, 0x98, 0xcd, 0x52, 0x02,
	0xa8, 0x02, 0xc5, 0x05, 0x42, 0x46, 0x5c, 0xdc, 0x10, 0xbd, 0x25, 0x45, 0xa9, 0x89, 0xb9, 0x44,
	0xe8, 0x30, 0x60, 0x14, 0xb2, 0xe2, 0x12, 0x44, 0xd2, 0x43, 0xb4, 0x4e, 0x0d, 0x46, 0x03, 0x46,
	0x27, 0xa1, 0x00, 0xc6, 0x28, 0x3e, 0x3d, 0x3d, 0x7d, 0xb0, 0x9c, 0x75, 0x06, 0x48, 0x2e, 0x89,
	0x0d, 0xcc, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x14, 0xca, 0xe3, 0x3f, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HelloServiceClient is the client API for HelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloServiceClient interface {
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	HelloStream(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (HelloService_HelloStreamClient, error)
	HelloStreamStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloStreamStreamClient, error)
}

type helloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloServiceClient(cc grpc.ClientConnInterface) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/proto.HelloService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloServiceClient) HelloStream(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (HelloService_HelloStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[0], "/proto.HelloService/HelloStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloService_HelloStreamClient interface {
	Recv() (*HelloResp, error)
	grpc.ClientStream
}

type helloServiceHelloStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloStreamClient) Recv() (*HelloResp, error) {
	m := new(HelloResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloServiceClient) HelloStreamStream(ctx context.Context, opts ...grpc.CallOption) (HelloService_HelloStreamStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloService_serviceDesc.Streams[1], "/proto.HelloService/HelloStreamStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloServiceHelloStreamStreamClient{stream}
	return x, nil
}

type HelloService_HelloStreamStreamClient interface {
	Send(*HelloReq) error
	Recv() (*HelloResp, error)
	grpc.ClientStream
}

type helloServiceHelloStreamStreamClient struct {
	grpc.ClientStream
}

func (x *helloServiceHelloStreamStreamClient) Send(m *HelloReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloServiceHelloStreamStreamClient) Recv() (*HelloResp, error) {
	m := new(HelloResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServiceServer is the server API for HelloService service.
type HelloServiceServer interface {
	Hello(context.Context, *HelloReq) (*HelloResp, error)
	HelloStream(*HelloReq, HelloService_HelloStreamServer) error
	HelloStreamStream(HelloService_HelloStreamStreamServer) error
}

// UnimplementedHelloServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServiceServer struct {
}

func (*UnimplementedHelloServiceServer) Hello(ctx context.Context, req *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedHelloServiceServer) HelloStream(req *HelloReq, srv HelloService_HelloStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloStream not implemented")
}
func (*UnimplementedHelloServiceServer) HelloStreamStream(srv HelloService_HelloStreamStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloStreamStream not implemented")
}

func RegisterHelloServiceServer(s *grpc.Server, srv HelloServiceServer) {
	s.RegisterService(&_HelloService_serviceDesc, srv)
}

func _HelloService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.HelloService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloService_HelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServiceServer).HelloStream(m, &helloServiceHelloStreamServer{stream})
}

type HelloService_HelloStreamServer interface {
	Send(*HelloResp) error
	grpc.ServerStream
}

type helloServiceHelloStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloStreamServer) Send(m *HelloResp) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloService_HelloStreamStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServiceServer).HelloStreamStream(&helloServiceHelloStreamStreamServer{stream})
}

type HelloService_HelloStreamStreamServer interface {
	Send(*HelloResp) error
	Recv() (*HelloReq, error)
	grpc.ServerStream
}

type helloServiceHelloStreamStreamServer struct {
	grpc.ServerStream
}

func (x *helloServiceHelloStreamStreamServer) Send(m *HelloResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloServiceHelloStreamStreamServer) Recv() (*HelloReq, error) {
	m := new(HelloReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloService_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloStream",
			Handler:       _HelloService_HelloStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HelloStreamStream",
			Handler:       _HelloService_HelloStreamStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "HelloService.proto",
}
